package{	import flash.display.BitmapData;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.Timer;	import org.tomasino.events.DataEvent;	import flash.display.Sprite;	import flash.events.Event;		/**	 * ...	 * @author tomasino	 */	[SWF ( backgroundColor = '0xFFFFFF', frameRate = '30', width = '600', height = '300')]		public class Main extends Sprite	{		public var NUM_POINTS:int = 150;		public var _points:Array = new Array ();		public var _timer:Timer = new Timer (2000, 1);		private var _isEnabled:Boolean = false;				public function Main():void		{			if (stage) init();			else addEventListener (Event.ADDED_TO_STAGE, init);		}				private function init(e:Event = null):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);			addEventListener (DataEvent.START, onCreate);			addEventListener (DataEvent.COMPLETE, onUnCreate);						var sproutMask:SproutMask = new SproutMask ();			var sproutLogo:SproutLogo = new SproutLogo ();			sproutMask.x = (this.stage.stageWidth >> 1) - (sproutMask.width >> 1);			sproutMask.y = (this.stage.stageHeight >> 1) - (sproutMask.height >> 1);			addChild (sproutLogo);						var numPointsCreated:int = 0;			var redRect:Rectangle = sproutMask.getBounds(this);			var redClipBmpData:BitmapData = new BitmapData(redRect.width, redRect.height, true, 0);			redClipBmpData.draw(sproutMask);						while (numPointsCreated < NUM_POINTS)			{				var point:Point = new Point ( Math.random () * this.stage.stageWidth, Math.random () * this.stage.stageHeight );												if (redClipBmpData.hitTest (new Point (0,0), 255, point))				{					var p:ScatterPoint = new ScatterPoint (-1, sproutMask.x + point.x, sproutMask.y + point.y);					_points.push (p);					addChild (p);					numPointsCreated ++;				}							}			redClipBmpData.dispose ();			_timer.addEventListener (TimerEvent.TIMER_COMPLETE, onStart);			_timer.start ();		}				private function onUnCreate(e:DataEvent):void		{			var p:ScatterPoint = e.data as ScatterPoint;			if (p)			{				var index:int = _points.indexOf (p);				if (index != -1) _points.splice (index, 1);								for (var i:int = 0; i < _points.length; ++i)				{					var p2:ScatterPoint = _points[i] as ScatterPoint;					p2.removeConstraint (p);				}				removeChild (p);				p = null;			}		}				private function onCreate(e:DataEvent):void		{			var p:ScatterPoint = e.data as ScatterPoint;			if (p)			{				_points.push (p);				for (var i:int = 0; i < _points.length; ++i)				{					var p2:ScatterPoint = _points[i] as ScatterPoint;					p.addConstraint ( p2 );					p2.addConstraint ( p );				}			}			if (_isEnabled) p.start ();		}				private function onStart (e:Event):void		{			_isEnabled = true;			for (var i:int = 0; i < _points.length; ++i)			{				var p:ScatterPoint = _points[i] as ScatterPoint;				p.start ();			}		}	}}